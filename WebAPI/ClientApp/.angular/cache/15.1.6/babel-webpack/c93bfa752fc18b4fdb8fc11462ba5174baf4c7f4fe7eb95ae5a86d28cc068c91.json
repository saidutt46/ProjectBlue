{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { UserLoginModel } from 'src/app/models/login.model';\nimport { NOTIFICATION_SERV_TOKEN } from 'src/app/services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/authentication.service\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/flex-layout/flex\";\nimport * as i8 from \"src/app/services/notification.service\";\nexport class LoginComponent {\n  constructor(dialog, fb, notifier, dialogRef, authService) {\n    this.dialog = dialog;\n    this.fb = fb;\n    this.notifier = notifier;\n    this.dialogRef = dialogRef;\n    this.authService = authService;\n    this.hide = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  close() {\n    this.dialog.closeAll();\n  }\n  save() {\n    const model = new UserLoginModel();\n    model.username = this.loginForm.get('username').value;\n    model.password = this.loginForm.get('password').value;\n    this.authService.login(model).subscribe(res => {\n      if (res && res.token) {\n        this.notifier.successNotification(`${res.userProfile.userName.toUpperCase()}: successfully logged In`);\n        this.dialog.closeAll();\n      } else {\n        this.notifier.errorNotification(\"Login Failure, please contact sys admin\");\n        this.dialog.closeAll();\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(NOTIFICATION_SERV_TOKEN), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i3.AuthenticationService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[\"mat-dialog-title\", \"\"], [\"fxFlex\", \"\", \"fxLayoutGap\", \"16px\", \"fxLayout\", \"column\", 3, \"formGroup\"], [\"required\", \"\", \"id\", \"username\", \"matInput\", \"\", \"formControlName\", \"username\", \"placeholder\", \"username\"], [\"required\", \"\", \"id\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"password\", 3, \"type\"], [\"matSuffix\", \"\", 3, \"click\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"end center\", \"fxLayoutGap\", \"16px\"], [1, \"mat-button\", 3, \"click\"], [1, \"mat-raised-button\", \"mat-primary\", 3, \"disabled\", \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1, \"LOGIN\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"form\", 1)(4, \"mat-form-field\");\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\");\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵelementStart(8, \"mat-icon\", 4);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_mat_icon_click_8_listener() {\n        return ctx.hide = !ctx.hide;\n      });\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(10, \"mat-dialog-actions\", 5)(11, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_11_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtext(12, \"CLOSE\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_13_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(14, \"SAVE\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"type\", ctx.hide ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.hide ? \"visibility\" : \"visibility_off\", \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i4.MatIcon, i5.MatFormField, i5.MatSuffix, i6.MatInput, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i7.DefaultLayoutDirective, i7.DefaultLayoutGapDirective, i7.DefaultLayoutAlignDirective, i7.DefaultFlexDirective, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,SAASC,uBAAuB,QAA6B,uCAAuC;;;;;;;;;;AAOpG,OAAM,MAAOC,cAAc;EAIzBC,YACUC,MAAiB,EACjBC,EAAe,EACkBC,QAA6B,EAC9DC,SAAuC,EACvCC,WAAkC;IAJlC,WAAM,GAANJ,MAAM;IACN,OAAE,GAAFC,EAAE;IAC+B,aAAQ,GAARC,QAAQ;IACzC,cAAS,GAATC,SAAS;IACT,gBAAW,GAAXC,WAAW;IAPrB,SAAI,GAAG,KAAK;EAQR;EAEJC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACc,QAAQ,CAAC,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CACbf,UAAU,CAACc,QAAQ,EACnBd,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,CAAC;EACJ;EAEAC,KAAK;IACH,IAAI,CAACZ,MAAM,CAACa,QAAQ,EAAE;EACxB;EAEAC,IAAI;IACF,MAAMC,KAAK,GAAG,IAAInB,cAAc,EAAE;IAClCmB,KAAK,CAACP,QAAQ,GAAG,IAAI,CAACF,SAAS,CAACU,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACtDF,KAAK,CAACL,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACU,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACtD,IAAI,CAACb,WAAW,CAACc,KAAK,CAACH,KAAK,CAAC,CAACI,SAAS,CAACC,GAAG,IAAG;MAC5C,IAAIA,GAAG,IAAIA,GAAG,CAACC,KAAK,EAAE;QACpB,IAAI,CAACnB,QAAQ,CAACoB,mBAAmB,CAAC,GAAGF,GAAG,CAACG,WAAW,CAACC,QAAQ,CAACC,WAAW,EAAE,0BAA0B,CAAC;QAAS,IAAI,CAACzB,MAAM,CAACa,QAAQ,EAAE;OACtI,MAAM;QACL,IAAI,CAACX,QAAQ,CAACwB,iBAAiB,CAAC,yCAAyC,CAAC;QAC1E,IAAI,CAAC1B,MAAM,CAACa,QAAQ,EAAE;;IAE1B,CAAC,CAAC;EACJ;;AAtCWf,cAAc;mBAAdA,cAAc,iGAOfD,uBAAuB;AAAA;AAPtBC,cAAc;QAAdA,cAAc;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BC,6BAAqB;MAAAA,qBAAK;MAAAA,iBAAK;MAE/BA,0CAAoB;MAIdA,2BAAyF;MAC3FA,iBAAiB;MACjBA,sCAAgB;MACdA,2BAEyB;MACzBA,mCAA4C;MAAxBA;QAAA;MAAA,EAAsB;MACtCA,YACJ;MAAAA,iBAAW;MAMjBA,8CAAiF;MACnDA;QAAA,OAASC,WAAO;MAAA,EAAC;MAACD,sBAAK;MAAAA,iBAAS;MAC1DA,kCAA6F;MAAjBA;QAAA,OAASC,UAAM;MAAA,EAAC;MAACD,qBAAI;MAAAA,iBAAS;;;MAlB1DA,eAAuB;MAAvBA,yCAAuB;MAMnEA,eAAoC;MAApCA,qDAAoC;MAGlCA,eACJ;MADIA,2EACJ;MAQMA,eAA8B;MAA9BA,gDAA8B","names":["Validators","UserLoginModel","NOTIFICATION_SERV_TOKEN","LoginComponent","constructor","dialog","fb","notifier","dialogRef","authService","ngOnInit","loginForm","group","username","required","password","minLength","close","closeAll","save","model","get","value","login","subscribe","res","token","successNotification","userProfile","userName","toUpperCase","errorNotification","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/dutt/Documents/aspnet projects/aspnet projects/Jalsa_Two/WebAPI/ClientApp/src/app/components/login/login.component.ts","/Users/dutt/Documents/aspnet projects/aspnet projects/Jalsa_Two/WebAPI/ClientApp/src/app/components/login/login.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { UserLoginModel } from 'src/app/models/login.model';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { NOTIFICATION_SERV_TOKEN, NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  hide = false;\n  \n  constructor(\n    private dialog: MatDialog,\n    private fb: FormBuilder,\n    @Inject(NOTIFICATION_SERV_TOKEN) private notifier: NotificationService,\n    private dialogRef: MatDialogRef<LoginComponent>,\n    private authService: AuthenticationService\n  ) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(6)\n      ]]\n    });\n  }\n\n  close() {\n    this.dialog.closeAll();\n  }\n\n  save() {\n    const model = new UserLoginModel();\n    model.username = this.loginForm.get('username')!.value;\n    model.password = this.loginForm.get('password')!.value;\n    this.authService.login(model).subscribe(res => {\n      if (res && res.token) {\n        this.notifier.successNotification(`${res.userProfile.userName.toUpperCase()}: successfully logged In`);        this.dialog.closeAll();\n      } else {\n        this.notifier.errorNotification(\"Login Failure, please contact sys admin\");\n        this.dialog.closeAll();\n      }\n    });\n  }\n}\n","<!-- <app-loading-bar *ngIf=\"loading$ | async\"></app-loading-bar> -->\n<h2 mat-dialog-title>LOGIN</h2>\n  \n<mat-dialog-content>\n\n  <form fxFlex fxLayoutGap=\"16px\" fxLayout=\"column\" [formGroup]=\"loginForm\">\n    <mat-form-field>\n      <input required id=\"username\" matInput formControlName=\"username\" placeholder=\"username\">\n    </mat-form-field>\n    <mat-form-field>\n      <input required id=\"password\" matInput formControlName=\"password\"\n        [type]=\"hide ? 'text' : 'password' \"\n        placeholder=\"password\">\n      <mat-icon matSuffix (click)=\"hide = !hide\" >\n          {{hide ? 'visibility' : 'visibility_off'}}\n      </mat-icon>\n    </mat-form-field>\n  </form>\n\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"16px\">\n    <button class=\"mat-button\"(click)=\"close()\">CLOSE</button>\n    <button [disabled]=\"loginForm.invalid\" class=\"mat-raised-button mat-primary\"(click)=\"save()\">SAVE</button>\n</mat-dialog-actions>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}