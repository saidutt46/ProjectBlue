{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { UserRegisterModel } from 'src/app/models/register.model';\nimport { NOTIFICATION_SERV_TOKEN } from 'src/app/services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/services/authentication.service\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/flex-layout/flex\";\nimport * as i8 from \"src/app/services/notification.service\";\nexport class RegisterComponent {\n  constructor(fb, dialog, authService, notifier) {\n    this.fb = fb;\n    this.dialog = dialog;\n    this.authService = authService;\n    this.notifier = notifier;\n    this.hide = false;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(4)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  saveUser() {\n    const model = new UserRegisterModel();\n    model.username = this.registerForm.get('username').value;\n    model.email = this.registerForm.get('email').value;\n    model.password = this.registerForm.get('password').value;\n    this.authService.registerUser(model).subscribe(res => {\n      if (res && res.success) {\n        this.notifier.successNotification('successful!, welcome and fuck off');\n        this.dialog.closeAll();\n      } else {\n        this.notifier.errorNotification(res.errors);\n        this.dialog.closeAll();\n      }\n    });\n  }\n  close() {\n    this.dialog.closeAll();\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(NOTIFICATION_SERV_TOKEN));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 18,\n  vars: 4,\n  consts: [[\"mat-dialog-title\", \"\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\", \"fxLayoutGap\", \"8px\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\", \"fxLayoutGap\", \"8px\", 3, \"formGroup\"], [\"required\", \"\", \"id\", \"userName\", \"matInput\", \"\", \"formControlName\", \"username\", \"placeholder\", \"User Name\"], [\"required\", \"\", \"id\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\", \"type\", \"email\", \"placeholder\", \"Email\"], [\"required\", \"\", \"id\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"password\", 3, \"type\"], [\"matSuffix\", \"\", 3, \"click\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"end center\", \"fxLayoutGap\", \"16px\"], [1, \"mat-button\", 3, \"click\"], [1, \"mat-raised-button\", \"mat-primary\", 3, \"disabled\", \"click\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1, \"REGISTER NEW USER\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"mat-dialog-content\")(3, \"div\", 1)(4, \"form\", 2)(5, \"mat-form-field\");\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-form-field\");\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\");\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementStart(11, \"mat-icon\", 6);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_mat_icon_click_11_listener() {\n        return ctx.hide = !ctx.hide;\n      });\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(13, \"mat-dialog-actions\", 7)(14, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_14_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtext(15, \"CLOSE\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_16_listener() {\n        return ctx.saveUser();\n      });\n      i0.ɵɵtext(17, \"SAVE\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"type\", ctx.hide ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.hide ? \"visibility\" : \"visibility_off\", \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i4.MatIcon, i5.MatFormField, i5.MatSuffix, i6.MatInput, i2.MatDialogTitle, i2.MatDialogContent, i2.MatDialogActions, i7.DefaultLayoutDirective, i7.DefaultLayoutGapDirective, i7.DefaultLayoutAlignDirective, i7.DefaultFlexDirective, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,iBAAiB,QAAQ,+BAA+B;AAEjE,SAASC,uBAAuB,QAA6B,uCAAuC;;;;;;;;;;AAOpG,OAAM,MAAOC,iBAAiB;EAI5BC,YACUC,EAAe,EACfC,MAAiB,EACjBC,WAAkC,EACDC,QAA6B;IAH9D,OAAE,GAAFH,EAAE;IACF,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IACsB,aAAQ,GAARC,QAAQ;IANnD,SAAI,GAAG,KAAK;EAOR;EAEJC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACe,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAG,QAAQ;IACN,MAAMC,KAAK,GAAG,IAAIjB,iBAAiB,EAAE;IACrCiB,KAAK,CAACN,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACS,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACzDF,KAAK,CAACH,KAAK,GAAG,IAAI,CAACL,YAAY,CAACS,GAAG,CAAC,OAAO,CAAE,CAACC,KAAK;IACnDF,KAAK,CAACF,QAAQ,GAAG,IAAI,CAACN,YAAY,CAACS,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACzD,IAAI,CAACb,WAAW,CAACc,YAAY,CAACH,KAAK,CAAC,CAACI,SAAS,CAACC,GAAG,IAAG;MACnD,IAAIA,GAAG,IAAIA,GAAG,CAACC,OAAO,EAAE;QACtB,IAAI,CAAChB,QAAQ,CAACiB,mBAAmB,CAAC,mCAAmC,CAAC;QACtE,IAAI,CAACnB,MAAM,CAACoB,QAAQ,EAAE;OACvB,MAAM;QACL,IAAI,CAAClB,QAAQ,CAACmB,iBAAiB,CAACJ,GAAG,CAACK,MAAM,CAAC;QAC3C,IAAI,CAACtB,MAAM,CAACoB,QAAQ,EAAE;;IAE1B,CAAC,CAAC;EAEJ;EAEAG,KAAK;IACH,IAAI,CAACvB,MAAM,CAACoB,QAAQ,EAAE;EACxB;;AAtCWvB,iBAAiB;mBAAjBA,iBAAiB,iJAQlBD,uBAAuB;AAAA;AARtBC,iBAAiB;QAAjBA,iBAAiB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX5BC,6BAAqB;MAAAA,iCAAiB;MAAAA,iBAAK;MAE3CA,0CAAoB;MAIZA,2BAA0F;MAC5FA,iBAAiB;MACjBA,sCAAgB;MACdA,2BAA6F;MAC/FA,iBAAiB;MACjBA,sCAAgB;MACdA,4BAEyB;MACzBA,oCAA4C;MAAxBA;QAAA;MAAA,EAAsB;MACtCA,aACJ;MAAAA,iBAAW;MAMnBA,8CAAiF;MACnDA;QAAA,OAASC,WAAO;MAAA,EAAC;MAACD,sBAAK;MAAAA,iBAAS;MAC1DA,kCAAqG;MAArBA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,qBAAI;MAAAA,iBAAS;;;MArB5GA,eAA0B;MAA1BA,4CAA0B;MAS1BA,eAAoC;MAApCA,qDAAoC;MAGlCA,eACJ;MADIA,2EACJ;MAQIA,eAAiC;MAAjCA,mDAAiC","names":["Validators","UserRegisterModel","NOTIFICATION_SERV_TOKEN","RegisterComponent","constructor","fb","dialog","authService","notifier","ngOnInit","registerForm","group","username","required","minLength","email","password","saveUser","model","get","value","registerUser","subscribe","res","success","successNotification","closeAll","errorNotification","errors","close","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/dutt/Documents/aspnet projects/aspnet projects/Jalsa_Two/WebAPI/ClientApp/src/app/components/register/register.component.ts","/Users/dutt/Documents/aspnet projects/aspnet projects/Jalsa_Two/WebAPI/ClientApp/src/app/components/register/register.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserRegisterModel } from 'src/app/models/register.model';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { NOTIFICATION_SERV_TOKEN, NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  hide = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private dialog: MatDialog,\n    private authService: AuthenticationService,\n    @Inject(NOTIFICATION_SERV_TOKEN) private notifier: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(4)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  saveUser(): void {\n    const model = new UserRegisterModel();\n    model.username = this.registerForm.get('username')!.value;\n    model.email = this.registerForm.get('email')!.value;\n    model.password = this.registerForm.get('password')!.value;\n    this.authService.registerUser(model).subscribe(res => {\n      if (res && res.success) {\n        this.notifier.successNotification('successful!, welcome and fuck off');\n        this.dialog.closeAll();\n      } else {\n        this.notifier.errorNotification(res.errors);\n        this.dialog.closeAll();\n      }\n    });\n    \n  }\n\n  close() {\n    this.dialog.closeAll();\n  }\n}\n","<!-- <app-loading-bar *ngIf=\"loading$ | async\"></app-loading-bar> -->\n  <h2 mat-dialog-title>REGISTER NEW USER</h2>\n  \n  <mat-dialog-content>\n    <div fxFlex fxLayout=\"column\" fxLayoutGap=\"8px\">\n      <form [formGroup]=\"registerForm\" fxFlex fxLayout=\"column\" fxLayoutGap=\"8px\">\n        <mat-form-field>\n          <input required id=\"userName\" matInput formControlName=\"username\" placeholder=\"User Name\">\n        </mat-form-field>\n        <mat-form-field>\n          <input required id=\"email\" matInput formControlName=\"email\" type=\"email\" placeholder=\"Email\">\n        </mat-form-field>\n        <mat-form-field>\n          <input required id=\"password\" matInput formControlName=\"password\"\n            [type]=\"hide ? 'text' : 'password' \"\n            placeholder=\"password\">\n          <mat-icon matSuffix (click)=\"hide = !hide\" >\n              {{hide ? 'visibility' : 'visibility_off'}}\n          </mat-icon>\n        </mat-form-field>\n      </form>\n    </div>\n  </mat-dialog-content>\n  \n  <mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"16px\">\n      <button class=\"mat-button\"(click)=\"close()\">CLOSE</button>\n      <button [disabled]=\"registerForm.invalid\" class=\"mat-raised-button mat-primary\" (click)=\"saveUser()\">SAVE</button>\n  </mat-dialog-actions>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}