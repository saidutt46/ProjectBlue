{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { UserLoginModel } from 'src/app/models/login.model';\nimport { NOTIFICATION_SERV_TOKEN } from 'src/app/services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/services/authentication.service\";\nimport * as i4 from \"src/app/services/notification.service\";\nexport class LoginComponent {\n  constructor(dialog, fb, notifier, dialogRef, authService) {\n    this.dialog = dialog;\n    this.fb = fb;\n    this.notifier = notifier;\n    this.dialogRef = dialogRef;\n    this.authService = authService;\n    this.hide = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  close() {\n    this.dialog.closeAll();\n  }\n  save() {\n    const model = new UserLoginModel();\n    model.username = this.loginForm.get('username').value;\n    model.password = this.loginForm.get('password').value;\n    this.authService.registerUser(model).subscribe(res => {\n      if (res && res.success) {\n        this.notifier.successNotification('successful!, welcome and fuck off');\n        this.dialog.closeAll();\n      } else {\n        this.notifier.errorNotification(res.errors);\n        this.dialog.closeAll();\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(NOTIFICATION_SERV_TOKEN), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i3.AuthenticationService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"login works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,SAASC,uBAAuB,QAA6B,uCAAuC;;;;;;AAOpG,OAAM,MAAOC,cAAc;EAIzBC,YACUC,MAAiB,EACjBC,EAAe,EACkBC,QAA6B,EAC9DC,SAAuC,EACvCC,WAAkC;IAJlC,WAAM,GAANJ,MAAM;IACN,OAAE,GAAFC,EAAE;IAC+B,aAAQ,GAARC,QAAQ;IACzC,cAAS,GAATC,SAAS;IACT,gBAAW,GAAXC,WAAW;IAPrB,SAAI,GAAG,KAAK;EAQR;EAEJC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACc,QAAQ,CAAC,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CACbf,UAAU,CAACc,QAAQ,EACnBd,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CACxB;KACF,CAAC;EACJ;EAEAC,KAAK;IACH,IAAI,CAACZ,MAAM,CAACa,QAAQ,EAAE;EACxB;EAEAC,IAAI;IACF,MAAMC,KAAK,GAAG,IAAInB,cAAc,EAAE;IAClCmB,KAAK,CAACP,QAAQ,GAAG,IAAI,CAACF,SAAS,CAACU,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACtDF,KAAK,CAACL,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACU,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACtD,IAAI,CAACb,WAAW,CAACc,YAAY,CAACH,KAAK,CAAC,CAACI,SAAS,CAACC,GAAG,IAAG;MACnD,IAAIA,GAAG,IAAIA,GAAG,CAACC,OAAO,EAAE;QACtB,IAAI,CAACnB,QAAQ,CAACoB,mBAAmB,CAAC,mCAAmC,CAAC;QACtE,IAAI,CAACtB,MAAM,CAACa,QAAQ,EAAE;OACvB,MAAM;QACL,IAAI,CAACX,QAAQ,CAACqB,iBAAiB,CAACH,GAAG,CAACI,MAAM,CAAC;QAC3C,IAAI,CAACxB,MAAM,CAACa,QAAQ,EAAE;;IAE1B,CAAC,CAAC;EACJ;;AAvCWf,cAAc;mBAAdA,cAAc,iGAOfD,uBAAuB;AAAA;AAPtBC,cAAc;QAAdA,cAAc;EAAA2B;EAAAC;EAAAC;EAAAC;IAAA;MCZ3BC,yBAAG;MAAAA,4BAAY;MAAAA,iBAAI","names":["Validators","UserLoginModel","NOTIFICATION_SERV_TOKEN","LoginComponent","constructor","dialog","fb","notifier","dialogRef","authService","ngOnInit","loginForm","group","username","required","password","minLength","close","closeAll","save","model","get","value","registerUser","subscribe","res","success","successNotification","errorNotification","errors","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/dutt/Documents/aspnet projects/aspnet projects/Jalsa_Two/WebAPI/ClientApp/src/app/components/login/login.component.ts","/Users/dutt/Documents/aspnet projects/aspnet projects/Jalsa_Two/WebAPI/ClientApp/src/app/components/login/login.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { UserLoginModel } from 'src/app/models/login.model';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { NOTIFICATION_SERV_TOKEN, NotificationService } from 'src/app/services/notification.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  hide = false;\n  \n  constructor(\n    private dialog: MatDialog,\n    private fb: FormBuilder,\n    @Inject(NOTIFICATION_SERV_TOKEN) private notifier: NotificationService,\n    private dialogRef: MatDialogRef<LoginComponent>,\n    private authService: AuthenticationService\n  ) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(6)\n      ]]\n    });\n  }\n\n  close() {\n    this.dialog.closeAll();\n  }\n\n  save() {\n    const model = new UserLoginModel();\n    model.username = this.loginForm.get('username')!.value;\n    model.password = this.loginForm.get('password')!.value;\n    this.authService.registerUser(model).subscribe(res => {\n      if (res && res.success) {\n        this.notifier.successNotification('successful!, welcome and fuck off');\n        this.dialog.closeAll();\n      } else {\n        this.notifier.errorNotification(res.errors);\n        this.dialog.closeAll();\n      }\n    });\n  }\n}\n","<p>login works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}